%{

#include "y.tab.h"



int rowNum = 1;
int tabSize = 4;
int column = 1;
int onDiscovery();
char line[10000] = "";
%}



character[a-z]
digit (-)?[0-9]


whiteSpace [ ]+
tab[\t]+
carriage[\n]
null[\0]

%%
{carriage}              {rowNum++; column = 1;}
{tab}                   {column += tabSize;}
{whiteSpace}            {column += yyleng;}



<<EOF>>     return END_OF_FILE;
"auto"                  {column += yyleng; yylval.token = "AUTO";  return AUTO;}
"break"                 {column += yyleng; yylval.token = "BREAK"; return BREAK;}
"case"                  {column += yyleng; yylval.token = "CASE"; return CASE;}
"char"                  {column += yyleng; yylval.token = "CHAR"; return CHAR;}
"const"                 {column += yyleng; yylval.token = "CONST"; return CONST;}
"continue"              {column += yyleng; yylval.token = "DEFAULT"; return CONTINUE;}   
"default"               {column += yyleng; yylval.token = "DEFAULT"; return DEFAULT;}
"do"                    {column += yyleng; yylval.token = "DO"; return DO;}
"double"                {column += yyleng; yylval.token = "DOUBLE"; return DOUBLE;}
"else"                  {column += yyleng; yylval.token = "ELSE"; return ELSE;}
"enum"                  {column += yyleng; yylval.token = "ENUM"; return ENUM;}
"extern"                {column += yyleng; yylval.token = "EXTERN"; return EXTERN;}
"float"                 {column += yyleng; yylval.token = "FLOAT"; return FLOAT;}
"for"                   {column += yyleng; yylval.token = "FOR"; return FOR;}
"goto"                  {column += yyleng; yylval.token = "GOTO"; return GOTO;}
"if"                    {column += yyleng; yylval.token = "IF"; return IF;}
"int"                   {column += yyleng; yylval.token = "INT"; return INT;}
"long"                  {column += yyleng; yylval.token = "LONG"; return LONG;}
"register"              {column += yyleng; yylval.token = "REGISTER"; return REGISTER;}
"return"                {column += yyleng; yylval.token = "RETURN"; return RETURN;}
"short"                 {column += yyleng; yylval.token = "SHORT"; return SHORT;}
"signed"                {column += yyleng; yylval.token = "SIGNED"; return SIGNED;}
"sizeof"                {column += yyleng; yylval.token = "SIZEOF"; return SIZEOF;}
"static"                {column += yyleng; yylval.token = "STATIC"; return STATIC;}
"struct"                {column += yyleng; yylval.token = "STRUCT"; return STRUCT;}
"switch"                {column += yyleng; yylval.token = "SWITCH"; return SWITCH;}
"typedef"               {column += yyleng; yylval.token = "TYPEDEF"; return TYPEDEF;}
"union"                 {column += yyleng; yylval.token = "UNION"; return UNION;}
"unsigned"              {column += yyleng; yylval.token = "UNSIGNED"; return UNSIGNED;}
"void"                  {column += yyleng; yylval.token = "VOID"; return VOID;}
"volatile"              {column += yyleng; yylval.token = "VOLATILE"; return VOLATILE;}
"while"                 {column += yyleng; yylval.token = "WHILE"; return WHILE;}



{character}+            {column += yyleng; yylval.token = "IDENTIFIER"; return IDENTIFIER;}

{digit}+                {column += yyleng; yylval.token = "INTEGER";yylval.iVal = atoi(yytext);}
{digit}+"."{digit}*     {column += yyleng; yylval.token = "FLOAT";yylval.fVal = atof(yytext);}


"("			            {column += yyleng; yylval.token = "("; return('('); }
")"			            {column += yyleng; yylval.token = ")"; return(')');}
";"                     {column += yyleng; yylval.token = ";"; return ';';}
"{"			            {column += yyleng; yylval.token = "{"; return('{');}
"}"			            {column += yyleng; yylval.token = "}"; return('}');}
"["			            {column += yyleng; yylval.token = "["; return('[');}
"]"			            {column += yyleng; yylval.token = "]"; return(']');}
"+"			            {column += yyleng; yylval.token = "+"; return('+');}
"-"			            {column += yyleng; yylval.token = "-"; return('-');}
"="			            {column += yyleng; yylval.token = "="; return('=');}
"*"			            {column += yyleng; yylval.token = "*"; return('*');}
"&"			            {column += yyleng; yylval.token = "&"; return('&');}
"!"			            {column += yyleng; yylval.token = "!"; return('!');}
"~"			            {column += yyleng; yylval.token = "~"; return('~');}
">"			            {column += yyleng; yylval.token = ">"; return('>');}
"<"			            {column += yyleng; yylval.token = "<"; return('<');}
","			            {column += yyleng; yylval.token = ","; return(',');}
"?"			            {column += yyleng; yylval.token = "?"; return('?');}
"^"			            {column += yyleng; yylval.token = "^"; return('^');}
"|"			            {column += yyleng; yylval.token = "|"; return('|');}
":"			            {column += yyleng; yylval.token = ":"; return(':');}
"."			            {column += yyleng; yylval.token = "."; return('.');}


.                       {    
                         printf("Diagnostic Report:\n\n");
                         printf("%s \n", yytext);                        
                         printf("^ is not a valid token. \n");
                         printf("Error at Row #:%i\n",rowNum);
                         printf("Error at Column #:%i\n",column); 
                         return -1;
                        } 


%%




